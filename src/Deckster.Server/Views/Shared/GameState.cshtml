@model Deckster.Server.Controllers.GameVm

<div x-data="vm">
  
  <h3>Players</h3>
  <table>
    <thead>
    <tr>
      <th>Name</th>
      <th>Points</th>
    </tr>
    </thead>
    <tbody>
    <template x-for="player in game.players">
      <tr>
        <td x-text="player.name"></td>
        <td x-text="player.points">
          <ul>
          <template x-for="info in player.info">
              <li x-text="info.key"></li>
          </template>
          </ul>
        </td>
      </tr>
    </template>
    </tbody>
    <tfoot>
    <button x-on:click="addBot()">Add bot</button>
    <button x-show="game.state=='Waiting'" x-on:click="start()">Start Game</button>
    <button x-show="game.state=='Running'" x-on:click="cancel()">Cancel</button>
    </tfoot>
  </table>
  
</div>

<script defer src="/content/alpine.min.js"></script>
<script>
  (function() {
    
    const vm = {
      game: @Html.Raw(Json.Serialize(Model)),
      refresh: async function () {
        const response = await fetch(`${document.location.pathname}`, {
          method: "GET",
          headers: {
            "Accept": "application/json"
          }
        });
        switch (response.status) {
          case 200: {
            this.game = await response.json();
          }
        }
      },
      addBot: async function () {
        await fetch(`${document.location.pathname}/bot`, {
          method: "POST",
          headers: {
            "Accept": "application/json"
          },
        });
        await this.refresh();
      },
      start: async function () {
        await fetch(`${document.location.pathname}/start`, {
          method: "POST",
          headers: {
            "Accept": "application/json"
          },
        });
        await this.refresh();
      },
      start: async function () {
        await fetch(`${document.location.pathname}`, {
          method: "DELETE",
          headers: {
            "Accept": "application/json"
          },
        });
        await this.refresh();
      },
      isWaiting() {
        return this.game.state === "Waiting";
      }
    };
    
    document.addEventListener("alpine:init", () => {
      Alpine.data("vm", () => (vm));
    });
    
    vm.refresh();
    setInterval(vm.refresh, 5000);
    
  })();
</script>