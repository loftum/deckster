using Deckster.Core;
using Deckster.Core.Extensions;
using Deckster.Games.CodeGeneration.Meta;

namespace Deckster.CodeGenerator.Generators;

public class KotlinClientGenerator : ClientGenerator
{
    public KotlinClientGenerator(GameMeta meta, string ns)
    {
        Source
            .AppendLine("/**")
            .AppendLine(" * Autogenerated by really, really eager small hamsters.")
            .AppendLine(" *")
            .AppendLine(" * Notifications (events) for this game:")
            .AppendLines(meta.Notifications.Select(n => string.Join('\n', $" * {n.Name}: {n.Message}")))
            .AppendLine(" *")
            .AppendLine("*/")
            .AppendLine($"package {ns}")
            .AppendLine()
            .AppendLine($"interface {meta.Name}Client {{");

        using (Source.Indent())
        {
            foreach (var method in meta.Methods)
            {
                Source.Append($"suspend fun {method.Name.ToCamelCase()}({string.Join(", ", method.Parameters.Select(FormatParameter))})");
                if (method.ReturnType.Name != "void")
                {
                    Source.Append($": {method.ReturnType}");
                }

                Source.AppendLine();
            }
        }
        
        Source.AppendLine("}");
    }

    private static string FormatParameter(ParameterMeta parameter)
    {
        return $"{parameter.Name}: {parameter.Type}";
    }
}