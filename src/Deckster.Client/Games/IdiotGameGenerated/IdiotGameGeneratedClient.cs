using Deckster.Core.Games.Idiot;
using System.Diagnostics;
using Deckster.Client.Communication;
using Deckster.Core.Protocol;
using Deckster.Core.Games.Common;
using Deckster.Core.Games.IdiotGame;

namespace Deckster.Client.Games.Idiot;

/**
 * Autogenerated by really, really eager small hamsters.
*/

[DebuggerDisplay("IdiotGameClient {PlayerData}")]
public class IdiotGameGeneratedClient(IClientChannel channel) : GameClient(channel)
{
    public event Action<ItsTimeToSwapCardsNotification>? ItsTimeToSwapCards;
    public event Action<PlayerIsReadyNotification>? PlayerIsReady;
    public event Action<GameStartedNotification>? GameHasStarted;
    public event Action<GameEndedNotification>? GameEnded;
    public event Action<ItsYourTurnNotification>? ItsYourTurn;
    public event Action<PlayerDrewCardsNotification>? PlayerDrewCards;
    public event Action<PlayerPutCardsNotification>? PlayerPutCards;
    public event Action<DiscardPileFlushedNotification>? DiscardPileFlushed;
    public event Action<PlayerIsDoneNotification>? PlayerIsDone;
    public event Action<PlayerAttemptedPuttingCardNotification>? PlayerAttemptedPuttingCard;
    public event Action<PlayerPulledInDiscardPileNotification>? PlayerPulledInDiscardPile;
    public event Action<PlayerSwappedCardsNotification>? PlayerSwappedCards;

    protected override void OnNotification(DecksterNotification notification)
    {
        try
        {
            switch (notification)
            {
                case ItsTimeToSwapCardsNotification m:
                    ItsTimeToSwapCards?.Invoke(m);
                    return;
                case PlayerIsReadyNotification m:
                    PlayerIsReady?.Invoke(m);
                    return;
                case GameStartedNotification m:
                    GameHasStarted?.Invoke(m);
                    return;
                case GameEndedNotification m:
                    GameEnded?.Invoke(m);
                    return;
                case ItsYourTurnNotification m:
                    ItsYourTurn?.Invoke(m);
                    return;
                case PlayerDrewCardsNotification m:
                    PlayerDrewCards?.Invoke(m);
                    return;
                case PlayerPutCardsNotification m:
                    PlayerPutCards?.Invoke(m);
                    return;
                case DiscardPileFlushedNotification m:
                    DiscardPileFlushed?.Invoke(m);
                    return;
                case PlayerIsDoneNotification m:
                    PlayerIsDone?.Invoke(m);
                    return;
                case PlayerAttemptedPuttingCardNotification m:
                    PlayerAttemptedPuttingCard?.Invoke(m);
                    return;
                case PlayerPulledInDiscardPileNotification m:
                    PlayerPulledInDiscardPile?.Invoke(m);
                    return;
                case PlayerSwappedCardsNotification m:
                    PlayerSwappedCards?.Invoke(m);
                    return;
                default:
                    return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

public static class IdiotGameGeneratedClientDecksterClientExtensions
{
    public static GameApi<IdiotGameGeneratedClient> IdiotGame(this DecksterClient client)
    {
        return new GameApi<IdiotGameGeneratedClient>(client.BaseUri.Append("idiotgame"), client.Token, c => new IdiotGameGeneratedClient(c));
    }
}
