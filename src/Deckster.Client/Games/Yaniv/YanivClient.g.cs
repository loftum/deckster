using Deckster.Games.Yaniv;
using Deckster.Core.Games.Common;
using System.Diagnostics;
using Deckster.Core.Communication;
using Deckster.Core.Protocol;
using Deckster.Core.Extensions;
using Deckster.Core.Games.Yaniv;

namespace Deckster.Client.Games.Yaniv;

/**
 * Autogenerated by really, really eager small hamsters.
*/

[DebuggerDisplay("YanivClient {PlayerData}")]
public class YanivClient(IClientChannel channel) : GameClient(channel)
{
    public event Action<PlayerPutCardsNotification>? PlayerPutCards;
    public event Action<RoundStartedNotification>? GameStarted;
    public event Action<ItsYourTurnNotification>? ItsYourTurn;
    public event Action<RoundEndedNotification>? RoundEnded;
    public event Action<GameEndedNotification>? GameEnded;

    public Task<CallYanivResponse> CallYanivAsync(CallYanivRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<CallYanivResponse>(request, false, cancellationToken);
    }

    public Task<PutCardsResponse> PutCardsAsync(PutCardsRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PutCardsResponse>(request, false, cancellationToken);
    }

    protected override void OnNotification(DecksterNotification notification)
    {
        try
        {
            switch (notification)
            {
                case PlayerPutCardsNotification m:
                    PlayerPutCards?.Invoke(m);
                    return;
                case RoundStartedNotification m:
                    GameStarted?.Invoke(m);
                    return;
                case ItsYourTurnNotification m:
                    ItsYourTurn?.Invoke(m);
                    return;
                case RoundEndedNotification m:
                    RoundEnded?.Invoke(m);
                    return;
                case GameEndedNotification m:
                    GameEnded?.Invoke(m);
                    return;
                default:
                    return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

public static class YanivClientConveniences
{
    public static async Task CallYanivAsync(this YanivClient self, CancellationToken cancellationToken = default)
    {
        var request = new CallYanivRequest{  };
        var response = await self.SendAsync<CallYanivResponse>(request, true, cancellationToken);
    }
    public static async Task<Card> PutCardsAsync(this YanivClient self, Card[] cards, DrawCardFrom drawCardFrom, CancellationToken cancellationToken = default)
    {
        var request = new PutCardsRequest{ Cards = cards, DrawCardFrom = drawCardFrom };
        var response = await self.SendAsync<PutCardsResponse>(request, true, cancellationToken);
        return response.Card;
    }
}

public static class YanivClientDecksterClientExtensions
{
    public static GameApi<YanivClient> Yaniv(this DecksterClient client)
    {
        return new GameApi<YanivClient>(client.BaseUri.Append("yaniv"), client.Token, c => new YanivClient(c));
    }
}
