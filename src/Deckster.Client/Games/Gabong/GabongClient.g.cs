using Deckster.Core.Games.Common;
using System.Diagnostics;
using Deckster.Core.Communication;
using Deckster.Core.Protocol;
using Deckster.Core.Extensions;
using Deckster.Core.Games.Gabong;

namespace Deckster.Client.Games.Gabong;

/**
 * Autogenerated by really, really eager small hamsters.
*/

[DebuggerDisplay("GabongClient {PlayerData}")]
public class GabongClient(IClientChannel channel) : GameClient(channel)
{
    public event Action<GameStartedNotification>? GameStarted;
    public event Action<RoundStartedNotification>? RoundStarted;
    public event Action<RoundEndedNotification>? RoundEnded;
    public event Action<GameEndedNotification>? GameEnded;
    public event Action<PlayerPutCardNotification>? PlayerPutCard;
    public event Action<PlayerDrewCardNotification>? PlayerDrewCard;
    public event Action<PlayerDrewPenaltyCardNotification>? PlayerDrewPenaltyCard;
    public event Action<PlayerLostTheirTurnNotification>? PlayerLostTheirTurn;

    public Task<PlayerViewOfGame> PutCardAsync(PutCardRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    public Task<PlayerViewOfGame> PlayGabong(PlayGabongRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }
    
    public Task<PlayerViewOfGame> PlayBonga(PlayBongaRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    public Task<GabongCardResponse> DrawCardAsync(DrawCardRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<GabongCardResponse>(request, false, cancellationToken);
    }

    public Task<ActionResponse> PassAsync(PassRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<ActionResponse>(request, false, cancellationToken);
    }

    protected override void OnNotification(DecksterNotification notification)
    {
        try
        {
            switch (notification)
            {
                case GameStartedNotification m:
                    GameStarted?.Invoke(m);
                    return;
                case GameEndedNotification m:
                    GameEnded?.Invoke(m);
                    return;
                case RoundStartedNotification m:
                    RoundStarted?.Invoke(m);
                    return;
                case RoundEndedNotification m:
                    RoundEnded?.Invoke(m);
                    return;
                case PlayerPutCardNotification m:
                    PlayerPutCard?.Invoke(m);
                    return;
                case PlayerDrewCardNotification m:
                    PlayerDrewCard?.Invoke(m);
                    return;
                case PlayerDrewPenaltyCardNotification m:
                    PlayerDrewPenaltyCard?.Invoke(m);
                    return;
                case PlayerLostTheirTurnNotification m:
                    PlayerLostTheirTurn?.Invoke(m);
                    return;
                default:
                    return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

public static class GabongClientConveniences
{
    public static async Task<PlayerViewOfGame> PutCardAsync(this GabongClient self, Card card, Suit? newSuit, CancellationToken cancellationToken = default)
    {
        var request = new PutCardRequest{ Card = card, NewSuit = newSuit};
        return await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
    }
    public static async  Task<PlayerViewOfGame> DrawCardAsync(this GabongClient self, CancellationToken cancellationToken = default)
    {
        var request = new DrawCardRequest{  };
        return await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
    }
    public static async Task<PlayerViewOfGame> PassAsync(this GabongClient self, CancellationToken cancellationToken = default)
    {
        var request = new PassRequest{  };
        return await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
    }
    public static async  Task<PlayerViewOfGame> PlayGabong(this GabongClient self, CancellationToken cancellationToken = default)
    {
        var request = new PlayGabongRequest(){  };
        return await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
    }
    public static async Task<PlayerViewOfGame> PlayBonga(this GabongClient self, CancellationToken cancellationToken = default)
    {
        var request = new PlayBongaRequest(){  };
        return await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
    }
}

public static class GabongClientDecksterClientExtensions
{
    public static GameApi<GabongClient> Gabong(this DecksterClient client)
    {
        return new GameApi<GabongClient>(client.BaseUri.Append("gabong"), client.Token, c => new GabongClient(c));
    }
}
