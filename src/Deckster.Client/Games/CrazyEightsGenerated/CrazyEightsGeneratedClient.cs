using Deckster.Core.Games.CrazyEights;
using Deckster.Core.Games.Common;
using System.Diagnostics;
using Deckster.Client.Communication;
using Deckster.Core.Protocol;

namespace Deckster.Client.Games.CrazyEights;

/**
 * Autogenerated by really, really eager small hamsters.
*/

[DebuggerDisplay("CrazyEightsClient {PlayerData}")]
public class CrazyEightsGeneratedClient(IClientChannel channel) : GameClient(channel)
{
    public event Action<GameStartedNotification>? GameStarted;
    public event Action<PlayerDrewCardNotification>? PlayerDrewCard;
    public event Action<ItsYourTurnNotification>? ItsYourTurn;
    public event Action<PlayerPassedNotification>? PlayerPassed;
    public event Action<PlayerPutCardNotification>? PlayerPutCard;
    public event Action<GameEndedNotification>? GameEnded;
    public event Action<PlayerIsDoneNotification>? PlayerIsDone;

    public Task<PlayerViewOfGame> PutCard(PutCardRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, cancellationToken);
    }

    public Task<PlayerViewOfGame> PutEight(PutEightRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, cancellationToken);
    }

    public Task<CardResponse> DrawCard(DrawCardRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<CardResponse>(request, cancellationToken);
    }

    public Task<EmptyResponse> Pass(PassRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<EmptyResponse>(request, cancellationToken);
    }

    protected override void OnNotification(DecksterNotification notification)
    {
        try
        {
            switch (notification)
            {
                case GameStartedNotification m:
                    GameStarted?.Invoke(m);
                    return;
                case PlayerDrewCardNotification m:
                    PlayerDrewCard?.Invoke(m);
                    return;
                case ItsYourTurnNotification m:
                    ItsYourTurn?.Invoke(m);
                    return;
                case PlayerPassedNotification m:
                    PlayerPassed?.Invoke(m);
                    return;
                case PlayerPutCardNotification m:
                    PlayerPutCard?.Invoke(m);
                    return;
                case GameEndedNotification m:
                    GameEnded?.Invoke(m);
                    return;
                case PlayerIsDoneNotification m:
                    PlayerIsDone?.Invoke(m);
                    return;
                default:
                    return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

public static class CrazyEightsGeneratedClientConveniences
{
    public static Task<PlayerViewOfGame> PutCard(this CrazyEightsGeneratedClient self, Card card, CancellationToken cancellationToken = default)
    {
        var request = new PutCardRequest{ Card = card };
        return self.PutCard(request, cancellationToken);
    }
    public static Task<PlayerViewOfGame> PutEight(this CrazyEightsGeneratedClient self, Card card, Suit newSuit, CancellationToken cancellationToken = default)
    {
        var request = new PutEightRequest{ Card = card, NewSuit = newSuit };
        return self.PutEight(request, cancellationToken);
    }
    public static Task<CardResponse> DrawCard(this CrazyEightsGeneratedClient self, CancellationToken cancellationToken = default)
    {
        var request = new DrawCardRequest{  };
        return self.DrawCard(request, cancellationToken);
    }
    public static Task<EmptyResponse> Pass(this CrazyEightsGeneratedClient self, CancellationToken cancellationToken = default)
    {
        var request = new PassRequest{  };
        return self.Pass(request, cancellationToken);
    }
}

public static class CrazyEightsGeneratedClientDecksterClientExtensions
{
    public static GameApi<CrazyEightsGeneratedClient> CrazyEights(this DecksterClient client)
    {
        return new GameApi<CrazyEightsGeneratedClient>(client.BaseUri.Append("crazyeights"), client.Token, c => new CrazyEightsGeneratedClient(c));
    }
}
