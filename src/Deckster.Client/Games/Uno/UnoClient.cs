using Deckster.Core.Games.Uno;
using Deckster.Core.Games.Common;
using System.Diagnostics;
using Deckster.Client.Communication;
using Deckster.Core.Protocol;

namespace Deckster.Client.Games.Uno;

/**
 * Autogenerated by really, really eager small hamsters.
*/

[DebuggerDisplay("UnoClient {PlayerData}")]
public class UnoClient(IClientChannel channel) : GameClient(channel)
{
    public event Action<GameStartedNotification>? GameStarted;
    public event Action<PlayerPutCardNotification>? PlayerPutCard;
    public event Action<PlayerPutWildNotification>? PlayerPutWild;
    public event Action<PlayerDrewCardNotification>? PlayerDrewCard;
    public event Action<PlayerPassedNotification>? PlayerPassed;
    public event Action<GameEndedNotification>? GameEnded;
    public event Action<ItsYourTurnNotification>? ItsYourTurn;
    public event Action<RoundStartedNotification>? RoundStarted;
    public event Action<RoundEndedNotification>? RoundEnded;

    public Task<PlayerViewOfGame> PutCardAsync(PutCardRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    public Task<PlayerViewOfGame> PutWildAsync(PutWildRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PlayerViewOfGame>(request, false, cancellationToken);
    }

    public Task<UnoCardResponse> DrawCardAsync(DrawCardRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<UnoCardResponse>(request, false, cancellationToken);
    }

    public Task<EmptyResponse> PassAsync(PassRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<EmptyResponse>(request, false, cancellationToken);
    }

    protected override void OnNotification(DecksterNotification notification)
    {
        try
        {
            switch (notification)
            {
                case GameStartedNotification m:
                    GameStarted?.Invoke(m);
                    return;
                case PlayerPutCardNotification m:
                    PlayerPutCard?.Invoke(m);
                    return;
                case PlayerPutWildNotification m:
                    PlayerPutWild?.Invoke(m);
                    return;
                case PlayerDrewCardNotification m:
                    PlayerDrewCard?.Invoke(m);
                    return;
                case PlayerPassedNotification m:
                    PlayerPassed?.Invoke(m);
                    return;
                case GameEndedNotification m:
                    GameEnded?.Invoke(m);
                    return;
                case ItsYourTurnNotification m:
                    ItsYourTurn?.Invoke(m);
                    return;
                case RoundStartedNotification m:
                    RoundStarted?.Invoke(m);
                    return;
                case RoundEndedNotification m:
                    RoundEnded?.Invoke(m);
                    return;
                default:
                    return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

public static class UnoClientConveniences
{
    public static async Task<(List<UnoCard> cards, UnoCard topOfPile, UnoColor currentColor, int stockPileCount, int discardPileCount, List<OtherUnoPlayer> otherPlayers)> PutCardAsync(this UnoClient self, UnoCard card, CancellationToken cancellationToken = default)
    {
        var request = new PutCardRequest{ Card = card };
        var response = await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
        return (response.Cards, response.TopOfPile, response.CurrentColor, response.StockPileCount, response.DiscardPileCount, response.OtherPlayers);
    }
    public static async Task<(List<UnoCard> cards, UnoCard topOfPile, UnoColor currentColor, int stockPileCount, int discardPileCount, List<OtherUnoPlayer> otherPlayers)> PutWildAsync(this UnoClient self, UnoCard card, UnoColor newColor, CancellationToken cancellationToken = default)
    {
        var request = new PutWildRequest{ Card = card, NewColor = newColor };
        var response = await self.SendAsync<PlayerViewOfGame>(request, true, cancellationToken);
        return (response.Cards, response.TopOfPile, response.CurrentColor, response.StockPileCount, response.DiscardPileCount, response.OtherPlayers);
    }
    public static async Task<UnoCard> DrawCardAsync(this UnoClient self, CancellationToken cancellationToken = default)
    {
        var request = new DrawCardRequest{  };
        var response = await self.SendAsync<UnoCardResponse>(request, true, cancellationToken);
        return response.Card;
    }
    public static async Task PassAsync(this UnoClient self, CancellationToken cancellationToken = default)
    {
        var request = new PassRequest{  };
        var response = await self.SendAsync<EmptyResponse>(request, true, cancellationToken);
    }
}

public static class UnoClientDecksterClientExtensions
{
    public static GameApi<UnoClient> Uno(this DecksterClient client)
    {
        return new GameApi<UnoClient>(client.BaseUri.Append("uno"), client.Token, c => new UnoClient(c));
    }
}
