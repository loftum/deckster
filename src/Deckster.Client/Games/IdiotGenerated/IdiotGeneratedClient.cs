using Deckster.Core.Games.Idiot;
using Deckster.Core.Games.Common;
using System;
using System.Diagnostics;
using Deckster.Client.Communication;
using Deckster.Core.Protocol;

namespace Deckster.Client.Games.Idiot;

/**
 * Autogenerated by really, really eager small hamsters.
*/

[DebuggerDisplay("IdiotClient {PlayerData}")]
public class IdiotGeneratedClient(IClientChannel channel) : GameClient(channel)
{
    public event Action<ItsTimeToSwapCardsNotification>? ItsTimeToSwapCards;
    public event Action<PlayerIsReadyNotification>? PlayerIsReady;
    public event Action<GameStartedNotification>? GameHasStarted;
    public event Action<GameEndedNotification>? GameEnded;
    public event Action<ItsYourTurnNotification>? ItsYourTurn;
    public event Action<PlayerDrewCardsNotification>? PlayerDrewCards;
    public event Action<PlayerPutCardsNotification>? PlayerPutCards;
    public event Action<DiscardPileFlushedNotification>? DiscardPileFlushed;
    public event Action<PlayerIsDoneNotification>? PlayerIsDone;
    public event Action<PlayerAttemptedPuttingCardNotification>? PlayerAttemptedPuttingCard;
    public event Action<PlayerPulledInDiscardPileNotification>? PlayerPulledInDiscardPile;
    public event Action<PlayerSwappedCardsNotification>? PlayerSwappedCards;

    public Task<EmptyResponse> IamReady(IamReadyRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<EmptyResponse>(request, false, cancellationToken);
    }

    public Task<SwapCardsResponse> SwapCards(SwapCardsRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<SwapCardsResponse>(request, false, cancellationToken);
    }

    public Task<EmptyResponse> PutCardsFromHand(PutCardsFromHandRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<EmptyResponse>(request, false, cancellationToken);
    }

    public Task<EmptyResponse> PutCardsFacingUp(PutCardsFacingUpRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<EmptyResponse>(request, false, cancellationToken);
    }

    public Task<PutBlindCardResponse> PutCardFacingDown(PutCardFacingDownRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PutBlindCardResponse>(request, false, cancellationToken);
    }

    public Task<PutBlindCardResponse> PutChanceCard(PutChanceCardRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PutBlindCardResponse>(request, false, cancellationToken);
    }

    public Task<PullInResponse> PullInDiscardPile(PullInDiscardPileRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<PullInResponse>(request, false, cancellationToken);
    }

    public Task<DrawCardsResponse> DrawCards(DrawCardsRequest request, CancellationToken cancellationToken = default)
    {
        return SendAsync<DrawCardsResponse>(request, false, cancellationToken);
    }

    protected override void OnNotification(DecksterNotification notification)
    {
        try
        {
            switch (notification)
            {
                case ItsTimeToSwapCardsNotification m:
                    ItsTimeToSwapCards?.Invoke(m);
                    return;
                case PlayerIsReadyNotification m:
                    PlayerIsReady?.Invoke(m);
                    return;
                case GameStartedNotification m:
                    GameHasStarted?.Invoke(m);
                    return;
                case GameEndedNotification m:
                    GameEnded?.Invoke(m);
                    return;
                case ItsYourTurnNotification m:
                    ItsYourTurn?.Invoke(m);
                    return;
                case PlayerDrewCardsNotification m:
                    PlayerDrewCards?.Invoke(m);
                    return;
                case PlayerPutCardsNotification m:
                    PlayerPutCards?.Invoke(m);
                    return;
                case DiscardPileFlushedNotification m:
                    DiscardPileFlushed?.Invoke(m);
                    return;
                case PlayerIsDoneNotification m:
                    PlayerIsDone?.Invoke(m);
                    return;
                case PlayerAttemptedPuttingCardNotification m:
                    PlayerAttemptedPuttingCard?.Invoke(m);
                    return;
                case PlayerPulledInDiscardPileNotification m:
                    PlayerPulledInDiscardPile?.Invoke(m);
                    return;
                case PlayerSwappedCardsNotification m:
                    PlayerSwappedCards?.Invoke(m);
                    return;
                default:
                    return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}

public static class IdiotGeneratedClientConveniences
{
    public static async Task IamReady(this IdiotGeneratedClient self, CancellationToken cancellationToken = default)
    {
        var request = new IamReadyRequest{  };
        var response = await self.SendAsync<EmptyResponse>(request, true, cancellationToken);
    }
    public static async Task<(Card cardNowOnHand, Card cardNowFacingUp)> SwapCards(this IdiotGeneratedClient self, Card cardOnHand, Card cardFacingUp, CancellationToken cancellationToken = default)
    {
        var request = new SwapCardsRequest{ CardOnHand = cardOnHand, CardFacingUp = cardFacingUp };
        var response = await self.SendAsync<SwapCardsResponse>(request, true, cancellationToken);
        return (response.CardNowOnHand, response.CardNowFacingUp);
    }
    public static async Task PutCardsFromHand(this IdiotGeneratedClient self, Card[] cards, CancellationToken cancellationToken = default)
    {
        var request = new PutCardsFromHandRequest{ Cards = cards };
        var response = await self.SendAsync<EmptyResponse>(request, true, cancellationToken);
    }
    public static async Task PutCardsFacingUp(this IdiotGeneratedClient self, Card[] cards, CancellationToken cancellationToken = default)
    {
        var request = new PutCardsFacingUpRequest{ Cards = cards };
        var response = await self.SendAsync<EmptyResponse>(request, true, cancellationToken);
    }
    public static async Task<(Card attemptedCard, Card[] pullInCards)> PutCardFacingDown(this IdiotGeneratedClient self, Int32 index, CancellationToken cancellationToken = default)
    {
        var request = new PutCardFacingDownRequest{ Index = index };
        var response = await self.SendAsync<PutBlindCardResponse>(request, true, cancellationToken);
        return (response.AttemptedCard, response.PullInCards);
    }
    public static async Task<(Card attemptedCard, Card[] pullInCards)> PutChanceCard(this IdiotGeneratedClient self, CancellationToken cancellationToken = default)
    {
        var request = new PutChanceCardRequest{  };
        var response = await self.SendAsync<PutBlindCardResponse>(request, true, cancellationToken);
        return (response.AttemptedCard, response.PullInCards);
    }
    public static async Task<Card[]> PullInDiscardPile(this IdiotGeneratedClient self, CancellationToken cancellationToken = default)
    {
        var request = new PullInDiscardPileRequest{  };
        var response = await self.SendAsync<PullInResponse>(request, true, cancellationToken);
        return response.Cards;
    }
    public static async Task<Card[]> DrawCards(this IdiotGeneratedClient self, Int32 numberOfCards, CancellationToken cancellationToken = default)
    {
        var request = new DrawCardsRequest{ NumberOfCards = numberOfCards };
        var response = await self.SendAsync<DrawCardsResponse>(request, true, cancellationToken);
        return response.Cards;
    }
}

public static class IdiotGeneratedClientDecksterClientExtensions
{
    public static GameApi<IdiotGeneratedClient> Idiot(this DecksterClient client)
    {
        return new GameApi<IdiotGeneratedClient>(client.BaseUri.Append("idiot"), client.Token, c => new IdiotGeneratedClient(c));
    }
}
