using Deckster.Server.CodeGeneration.Meta;
using StringExtensions = Deckster.Client.Sugar.StringExtensions;

namespace Deckster.Generated.Client;

public class KotlinClientGenerator : ClientGenerator
{
    public KotlinClientGenerator(GameMeta meta, string ns)
    {
        SourceCode
            .AppendLine("/**")
            .AppendLine(" * Autogenerated by really, really eager small hamsters.")
            .AppendLine(" *")
            .AppendLine(" * Notifications (events) for this game:")
            .AppendLines(meta.Notifications.Select(n => string.Join('\n', $" * {n.Name}: {n.Message}")))
            .AppendLine(" *")
            .AppendLine("*/")
            .AppendLine($"package {ns}")
            .AppendLine()
            .AppendLine($"interface {meta.Name}Client {{");

        using (SourceCode.Indent())
        {
            foreach (var method in meta.Methods)
            {
                SourceCode.Append($"suspend fun {StringExtensions.ToCamelCase(method.Name)}({string.Join(", ", method.Parameters.Select(FormatParameter))})");
                if (method.ReturnType.Name != "void")
                {
                    SourceCode.Append($": {method.ReturnType}");
                }

                SourceCode.AppendLine();
            }
        }
        
        SourceCode.AppendLine("}");
    }

    private static string FormatParameter(ParameterMeta parameter)
    {
        return $"{parameter.Name}: {parameter.Type}";
    }
}